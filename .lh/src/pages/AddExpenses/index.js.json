{
    "sourceFile": "src/pages/AddExpenses/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1710441298592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1710441484516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,8 @@\n                     <TouchableOpacity onPress={async() => pickImage()}>\r\n                         <Text>Arquivo</Text>\r\n                     </TouchableOpacity>\r\n                 </View>\r\n-                \r\n             </Modal>\r\n \r\n             <View style={Styles.imageContainer}>\r\n             <ImageViewer\r\n"
                },
                {
                    "date": 1710441534198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} >\r\n+                <View style={{width: 200, height: 500}}>\r\n+                    <Text style={{backgroundColor: \"red\"}}>Selecione</Text>\r\n+                    <TouchableOpacity>\r\n+                        <Text>Camera</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity onPress={async() => pickImage()}>\r\n+                        <Text>Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710441609822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Style.areaModal}>\r\n+                <View style={{width: 200, height: 500}}>\r\n+                    <Text style={{backgroundColor: \"red\"}}>Selecione</Text>\r\n+                    <TouchableOpacity>\r\n+                        <Text>Camera</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity onPress={async() => pickImage()}>\r\n+                        <Text>Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710441946947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal}>\r\n+                <View style={}>\r\n+                    <Text style={{backgroundColor: \"red\"}}>Selecione</Text>\r\n+                    <TouchableOpacity>\r\n+                        <Text>Camera</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity onPress={async() => pickImage()}>\r\n+                        <Text>Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710441957640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={{backgroundColor: \"red\"}}>Selecione</Text>\r\n+                    <TouchableOpacity>\r\n+                        <Text>Camera</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity onPress={async() => pickImage()}>\r\n+                        <Text>Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710441968957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n                 </View>\r\n             </TouchableOpacity>\r\n             <Modal animationType='fade' visible={visible} style={Styles.areaModal}>\r\n                 <View style={Styles.formModal}>\r\n-                    <Text style={{backgroundColor: \"red\"}}>Selecione</Text>\r\n+                    <Text>Selecione</Text>\r\n                     <TouchableOpacity>\r\n                         <Text>Camera</Text>\r\n                     </TouchableOpacity>\r\n                     <TouchableOpacity onPress={async() => pickImage()}>\r\n"
                },
                {
                    "date": 1710441975117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style>Selecione</Text>\r\n+                    <TouchableOpacity>\r\n+                        <Text>Camera</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity onPress={async() => pickImage()}>\r\n+                        <Text>Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710441984828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n                 </View>\r\n             </TouchableOpacity>\r\n             <Modal animationType='fade' visible={visible} style={Styles.areaModal}>\r\n                 <View style={Styles.formModal}>\r\n-                    <Text style>Selecione</Text>\r\n+                    <Text style={title}>Selecione</Text>\r\n                     <TouchableOpacity>\r\n                         <Text>Camera</Text>\r\n                     </TouchableOpacity>\r\n                     <TouchableOpacity onPress={async() => pickImage()}>\r\n@@ -143,734 +143,4 @@\n             </TouchableOpacity>\r\n         </View>\r\n     );\r\n }\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text>Selecione</Text>\r\n-                    <TouchableOpacity>\r\n-                        <Text>Camera</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity onPress={async() => pickImage()}>\r\n-                        <Text>Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal}>\r\n-                <View style={}>\r\n-                    <Text style={{backgroundColor: \"red\"}}>Selecione</Text>\r\n-                    <TouchableOpacity>\r\n-                        <Text>Camera</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity onPress={async() => pickImage()}>\r\n-                        <Text>Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Style.areaModal}>\r\n-                <View style={{width: 200, height: 500}}>\r\n-                    <Text style={{backgroundColor: \"red\"}}>Selecione</Text>\r\n-                    <TouchableOpacity>\r\n-                        <Text>Camera</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity onPress={async() => pickImage()}>\r\n-                        <Text>Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} >\r\n-                <View style={{width: 200, height: 500}}>\r\n-                    <Text style={{backgroundColor: \"red\"}}>Selecione</Text>\r\n-                    <TouchableOpacity>\r\n-                        <Text>Camera</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity onPress={async() => pickImage()}>\r\n-                        <Text>Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible}>\r\n-                <View style={{width: 200, height: 500}}>\r\n-                    <Text style={{backgroundColor: \"red\"}}>Selecione</Text>\r\n-                    <TouchableOpacity>\r\n-                        <Text>Camera</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity onPress={async() => pickImage()}>\r\n-                        <Text>Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1710441990715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={titleForm}>Selecione</Text>\r\n+                    <TouchableOpacity>\r\n+                        <Text>Camera</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity onPress={async() => pickImage()}>\r\n+                        <Text>Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442079763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={StylestitleForm}>Selecione</Text>\r\n+                    <TouchableOpacity>\r\n+                        <Text>Camera</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity onPress={async() => pickImage()}>\r\n+                        <Text>Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442464839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleForm}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.button} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonText}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainer}>\r\n+                    <TouchableOpacity style={Styles.button} onPress={pickImage}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.button} onPress={pickCamera}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442532853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,155 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    function\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleForm}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.button} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonText}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainer}>\r\n+                    <TouchableOpacity style={Styles.button} onPress={pickImage}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.button} onPress={pickCamera}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442539352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    function closeModal(){\r\n+        \r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleForm}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.button} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonText}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainer}>\r\n+                    <TouchableOpacity style={Styles.button} onPress={pickImage}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.button} onPress={pickCamera}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442544512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    function closeModal(){\r\n+        setVisible(false)\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleForm}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.button} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonText}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainer}>\r\n+                    <TouchableOpacity style={Styles.button} onPress={pickImage}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.button} onPress={pickCamera}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442600188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    function closeModal(){\r\n+        setVisible(false);\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleForm}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.button} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonText}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainer}>\r\n+                    {/* <TouchableOpacity style={Styles.button} onPress={pickImage}> */}\r\n+                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.button} onPress={pickCamera}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442609202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    function closeModal(){\r\n+        setVisible(false);\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleForm}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.button} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonText}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainer}>\r\n+                    <TouchableOpacity style={Styles.button} >\r\n+                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.button} onPress={pickCamera}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442615100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    function closeModal(){\r\n+        setVisible(false);\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleForm}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.button} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonText}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainer}>\r\n+                    <TouchableOpacity style={Styles.button} >\r\n+                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.button}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442703436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    function closeModal(){\r\n+        setVisible(false);\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleForm}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonText}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainer}>\r\n+                    <TouchableOpacity style={Styles.button} >\r\n+                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.button}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442710148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    function closeModal(){\r\n+        setVisible(false);\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleForm}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonText}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainer}>\r\n+                    <TouchableOpacity style={Styles.buttonModal} >\r\n+                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.button}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442731086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    function closeModal(){\r\n+        setVisible(false);\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleForm}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonTextModal}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainer}>\r\n+                    <TouchableOpacity style={Styles.buttonModal} >\r\n+                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.button}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442752596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    function closeModal(){\r\n+        setVisible(false);\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleForm}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonTextModal}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainer}>\r\n+                    <TouchableOpacity style={Styles.buttonModal} >\r\n+                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.buttonModal}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442761176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    function closeModal(){\r\n+        setVisible(false);\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleForm}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonTextModal}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainer}>\r\n+                    <TouchableOpacity style={Styles.buttonModal} >\r\n+                        <Text style={Styles.buttonTextModal}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.buttonModal}>\r\n+                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442828908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n                     <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n                 </View>\r\n             </TouchableOpacity>\r\n             <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n-            <View style={Styles.modalContainer}>\r\n+            <View style={Styles.modalContainerModal}>\r\n                 <View style={Styles.formModal}>\r\n                     <Text style={Styles.titleForm}>Selecione</Text>\r\n                     <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n                         <Text style={Styles.buttonTextModal}>Fechar</Text>\r\n"
                },
                {
                    "date": 1710442836049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n             </TouchableOpacity>\r\n             <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n             <View style={Styles.modalContainerModal}>\r\n                 <View style={Styles.formModal}>\r\n-                    <Text style={Styles.titleForm}>Selecione</Text>\r\n+                    <Text style={Styles.titleFormModal}>Selecione</Text>\r\n                     <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n                         <Text style={Styles.buttonTextModal}>Fechar</Text>\r\n                     </TouchableOpacity>\r\n                 </View>\r\n@@ -154,2163 +154,4 @@\n             </TouchableOpacity>\r\n         </View>\r\n     );\r\n }\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    function closeModal(){\r\n-        setVisible(false);\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n-            <View style={Styles.modalContainer}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text style={Styles.titleForm}>Selecione</Text>\r\n-                    <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n-                        <Text style={Styles.buttonTextModal}>Fechar</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-                <View style={Styles.buttonsContainer}>\r\n-                    <TouchableOpacity style={Styles.buttonModal} >\r\n-                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity style={Styles.buttonModal}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </View>\r\n-        </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    function closeModal(){\r\n-        setVisible(false);\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n-            <View style={Styles.modalContainer}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text style={Styles.titleForm}>Selecione</Text>\r\n-                    <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n-                        <Text style={Styles.buttonTextModal}>Fechar</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-                <View style={Styles.buttonsContainer}>\r\n-                    <TouchableOpacity style={Styles.buttonModal} >\r\n-                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity style={Styles.button}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </View>\r\n-        </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    function closeModal(){\r\n-        setVisible(false);\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n-            <View style={Styles.modalContainer}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text style={Styles.titleForm}>Selecione</Text>\r\n-                    <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n-                        <Text style={Styles.buttonText}>Fechar</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-                <View style={Styles.buttonsContainer}>\r\n-                    <TouchableOpacity style={Styles.buttonModal} >\r\n-                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity style={Styles.button}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </View>\r\n-        </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    function closeModal(){\r\n-        setVisible(false);\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n-            <View style={Styles.modalContainer}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text style={Styles.titleForm}>Selecione</Text>\r\n-                    <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n-                        <Text style={Styles.buttonText}>Fechar</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-                <View style={Styles.buttonsContainer}>\r\n-                    <TouchableOpacity style={Styles.button} >\r\n-                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity style={Styles.button}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </View>\r\n-        </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    function closeModal(){\r\n-        setVisible(false);\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n-            <View style={Styles.modalContainer}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text style={Styles.titleForm}>Selecione</Text>\r\n-                    <TouchableOpacity style={Styles.button} onPress={closeModal}>\r\n-                        <Text style={Styles.buttonText}>Fechar</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-                <View style={Styles.buttonsContainer}>\r\n-                    <TouchableOpacity style={Styles.button} >\r\n-                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity style={Styles.button}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </View>\r\n-        </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    function closeModal(){\r\n-        setVisible(false);\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n-            <View style={Styles.modalContainer}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text style={Styles.titleForm}>Selecione</Text>\r\n-                    <TouchableOpacity style={Styles.button} onPress={closeModal}>\r\n-                        <Text style={Styles.buttonText}>Fechar</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-                <View style={Styles.buttonsContainer}>\r\n-                    <TouchableOpacity style={Styles.button} >\r\n-                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity style={Styles.button} onPress={pickCamera}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </View>\r\n-        </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    function closeModal(){\r\n-        setVisible(false);\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n-            <View style={Styles.modalContainer}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text style={Styles.titleForm}>Selecione</Text>\r\n-                    <TouchableOpacity style={Styles.button} onPress={closeModal}>\r\n-                        <Text style={Styles.buttonText}>Fechar</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-                <View style={Styles.buttonsContainer}>\r\n-                    {/* <TouchableOpacity style={Styles.button} onPress={pickImage}> */}\r\n-                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity style={Styles.button} onPress={pickCamera}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </View>\r\n-        </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    function closeModal(){\r\n-        setVisible(false)\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n-            <View style={Styles.modalContainer}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text style={Styles.titleForm}>Selecione</Text>\r\n-                    <TouchableOpacity style={Styles.button} onPress={closeModal}>\r\n-                        <Text style={Styles.buttonText}>Fechar</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-                <View style={Styles.buttonsContainer}>\r\n-                    <TouchableOpacity style={Styles.button} onPress={pickImage}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity style={Styles.button} onPress={pickCamera}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </View>\r\n-        </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    function closeModal(){\r\n-        \r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n-            <View style={Styles.modalContainer}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text style={Styles.titleForm}>Selecione</Text>\r\n-                    <TouchableOpacity style={Styles.button} onPress={closeModal}>\r\n-                        <Text style={Styles.buttonText}>Fechar</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-                <View style={Styles.buttonsContainer}>\r\n-                    <TouchableOpacity style={Styles.button} onPress={pickImage}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity style={Styles.button} onPress={pickCamera}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </View>\r\n-        </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    function\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n-            <View style={Styles.modalContainer}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text style={Styles.titleForm}>Selecione</Text>\r\n-                    <TouchableOpacity style={Styles.button} onPress={closeModal}>\r\n-                        <Text style={Styles.buttonText}>Fechar</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-                <View style={Styles.buttonsContainer}>\r\n-                    <TouchableOpacity style={Styles.button} onPress={pickImage}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity style={Styles.button} onPress={pickCamera}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </View>\r\n-        </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n-            <View style={Styles.modalContainer}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text style={Styles.titleForm}>Selecione</Text>\r\n-                    <TouchableOpacity style={Styles.button} onPress={closeModal}>\r\n-                        <Text style={Styles.buttonText}>Fechar</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-                <View style={Styles.buttonsContainer}>\r\n-                    <TouchableOpacity style={Styles.button} onPress={pickImage}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity style={Styles.button} onPress={pickCamera}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </View>\r\n-        </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text style={StylestitleForm}>Selecione</Text>\r\n-                    <TouchableOpacity>\r\n-                        <Text>Camera</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity onPress={async() => pickImage()}>\r\n-                        <Text>Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text style={titleForm}>Selecione</Text>\r\n-                    <TouchableOpacity>\r\n-                        <Text>Camera</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity onPress={async() => pickImage()}>\r\n-                        <Text>Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n-import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n-import React, { useState, useEffect } from 'react';\r\n-import * as ImagePicker from 'expo-image-picker';\r\n-import { Camera } from 'expo-camera';\r\n-import Styles from './Styles/';\r\n-import Icon from 'react-native-vector-icons/MaterialIcons';\r\n-import Header from '../../components/Header/';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-\r\n-const inititExpensesData ={\r\n-    description: 'a',\r\n-    category:'a',\r\n-    value:'a',\r\n-    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n-};\r\n-\r\n-\r\n-\r\n-function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n-    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n-    return <Image source={imageSource} style={Styles.image} />;\r\n-  }\r\n-  \r\n-\r\n-export default function AddExpenses() {\r\n-    const navigation = useNavigation();\r\n-    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n-    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n-    const [hasPermission, setHasPermission] = useState(null);\r\n-    const [type, setType] = useState(Camera.Constants.Type.back);\r\n-    const [camera, setCamera] = useState(null);\r\n-    const [selectedImage , setSelectedImage] = useState(null);\r\n-    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n-    const [visible, setVisible] = useState(false);\r\n-\r\n-\r\n-    useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Camera.requestCameraPermissionsAsync();\r\n-            setHasPermission(status === 'granted');\r\n-        })();\r\n-    }, []);\r\n-\r\n-    const takePicture = async () => {\r\n-        if (camera) {\r\n-            const photo = await camera.takePictureAsync();\r\n-            setExpensesData({...expensesData, invoice: photo.uri});\r\n-        }\r\n-    };\r\n-\r\n-    const pickImage = async () => {\r\n-        let result = await ImagePicker.launchImageLibraryAsync({\r\n-            allowsEditing: true,\r\n-            quality: 1,\r\n-        });\r\n-\r\n-        setSelectedImage(result.assets[0].uri);\r\n-        \r\n-        \r\n-    };\r\n-\r\n-    const addExpenses = () => {\r\n-        if(validateExpenses()){\r\n-            setAlertEmptyInput('');\r\n-            const success = true;\r\n-            if (success) {\r\n-                console.log(selectedImage);\r\n-            } else {\r\n-                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n-            }\r\n-        } else {\r\n-            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n-        }\r\n-    };\r\n-\r\n-    const validateExpenses = () => {\r\n-        const {description, category, value} = expensesData; \r\n-        return (\r\n-            description.trim() !== '' &&\r\n-            category.trim() !== '' &&\r\n-            value.trim() !== '' &&\r\n-            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n-        );\r\n-    };\r\n-\r\n-    function openModal(){\r\n-        setVisible(true)\r\n-    }\r\n-\r\n-    return (\r\n-        <View style={Styles.container}>\r\n-            <Header/>\r\n-            <View Style={Styles.form}> \r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Descrição'\r\n-                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Categoria'\r\n-                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n-\r\n-                />\r\n-                <TextInput\r\n-                    style={Styles.input}\r\n-                    placeholder='Valor'\r\n-                    keyboardType='numeric'\r\n-                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n-\r\n-                />\r\n-            </View>\r\n-            \r\n-            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n-                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-            <Modal animationType='fade' visible={visible} style={Styles.areaModal}>\r\n-                <View style={Styles.formModal}>\r\n-                    <Text style={title}>Selecione</Text>\r\n-                    <TouchableOpacity>\r\n-                        <Text>Camera</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity onPress={async() => pickImage()}>\r\n-                        <Text>Arquivo</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </Modal>\r\n-\r\n-            <View style={Styles.imageContainer}>\r\n-            <ImageViewer\r\n-                placeholderImageSource={PlaceholderImage}\r\n-                selectedImage={selectedImage}\r\n-            />\r\n-            </View>\r\n-\r\n-            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n-                <View style={Styles.button}>\r\n-                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n-                </View>\r\n-            </TouchableOpacity>\r\n-        </View>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1710442846828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n                     <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n                         <Text style={Styles.buttonTextModal}>Fechar</Text>\r\n                     </TouchableOpacity>\r\n                 </View>\r\n-                <View style={Styles.buttonsContainer}>\r\n+                <View style={Styles.buttonsContainerModal}>\r\n                     <TouchableOpacity style={Styles.buttonModal} >\r\n                         <Text style={Styles.buttonTextModal}>Selecionar Arquivo</Text>\r\n                     </TouchableOpacity>\r\n                     <TouchableOpacity style={Styles.buttonModal}>\r\n"
                },
                {
                    "date": 1710442858424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n                     <TouchableOpacity style={Styles.buttonModal} >\r\n                         <Text style={Styles.buttonTextModal}>Selecionar Arquivo</Text>\r\n                     </TouchableOpacity>\r\n                     <TouchableOpacity style={Styles.buttonModal}>\r\n-                        <Text style={Styles.buttonText}>Selecionar Câmera</Text>\r\n+                        <Text style={Styles.buttonTextModal}>Selecionar Câmera</Text>\r\n                     </TouchableOpacity>\r\n                 </View>\r\n             </View>\r\n         </Modal>\r\n"
                },
                {
                    "date": 1710442872161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    function closeModal(){\r\n+        setVisible(false);\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleFormModal}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonTextModal}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainerModal}>\r\n+                    <TouchableOpacity style={Styles.buttonModal} >\r\n+                        <Text style={Styles.buttonTextModal}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.buttonModal}>\r\n+                        <Text style={Styles.buttonTextModal}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442946751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,158 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    function closeModal(){\r\n+        setVisible(false);\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                \r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleFormModal}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonTextModal}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainerModal}>\r\n+                    <TouchableOpacity style={Styles.buttonModal} >\r\n+                        <Text style={Styles.buttonTextModal}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.buttonModal}>\r\n+                        <Text style={Styles.buttonTextModal}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1710442955229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,10 +116,10 @@\n             </View>\r\n             \r\n             <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n                 <View>\r\n-                    \r\n-                </View>\r\n+\r\n+               \r\n                 <View style={Styles.button}>\r\n                     <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n                     <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n                 </View>\r\n"
                },
                {
                    "date": 1710442966614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import * as ImagePicker from 'expo-image-picker';\r\n+import { Camera } from 'expo-camera';\r\n+import Styles from './Styles/';\r\n+import Icon from 'react-native-vector-icons/MaterialIcons';\r\n+import Header from '../../components/Header/';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+\r\n+const inititExpensesData ={\r\n+    description: 'a',\r\n+    category:'a',\r\n+    value:'a',\r\n+    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n+};\r\n+\r\n+\r\n+\r\n+function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n+    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n+    return <Image source={imageSource} style={Styles.image} />;\r\n+  }\r\n+  \r\n+\r\n+export default function AddExpenses() {\r\n+    const navigation = useNavigation();\r\n+    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n+    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n+    const [hasPermission, setHasPermission] = useState(null);\r\n+    const [type, setType] = useState(Camera.Constants.Type.back);\r\n+    const [camera, setCamera] = useState(null);\r\n+    const [selectedImage , setSelectedImage] = useState(null);\r\n+    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n+    const [visible, setVisible] = useState(false);\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        (async () => {\r\n+            const { status } = await Camera.requestCameraPermissionsAsync();\r\n+            setHasPermission(status === 'granted');\r\n+        })();\r\n+    }, []);\r\n+\r\n+    const takePicture = async () => {\r\n+        if (camera) {\r\n+            const photo = await camera.takePictureAsync();\r\n+            setExpensesData({...expensesData, invoice: photo.uri});\r\n+        }\r\n+    };\r\n+\r\n+    const pickImage = async () => {\r\n+        let result = await ImagePicker.launchImageLibraryAsync({\r\n+            allowsEditing: true,\r\n+            quality: 1,\r\n+        });\r\n+\r\n+        setSelectedImage(result.assets[0].uri);\r\n+        \r\n+        \r\n+    };\r\n+\r\n+    const addExpenses = () => {\r\n+        if(validateExpenses()){\r\n+            setAlertEmptyInput('');\r\n+            const success = true;\r\n+            if (success) {\r\n+                console.log(selectedImage);\r\n+            } else {\r\n+                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n+            }\r\n+        } else {\r\n+            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n+        }\r\n+    };\r\n+\r\n+    const validateExpenses = () => {\r\n+        const {description, category, value} = expensesData; \r\n+        return (\r\n+            description.trim() !== '' &&\r\n+            category.trim() !== '' &&\r\n+            value.trim() !== '' &&\r\n+            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n+        );\r\n+    };\r\n+\r\n+    function openModal(){\r\n+        setVisible(true)\r\n+    }\r\n+\r\n+    function closeModal(){\r\n+        setVisible(false);\r\n+    }\r\n+\r\n+    return (\r\n+        <View style={Styles.container}>\r\n+            <Header/>\r\n+            <View Style={Styles.form}> \r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Descrição'\r\n+                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Categoria'\r\n+                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n+\r\n+                />\r\n+                <TextInput\r\n+                    style={Styles.input}\r\n+                    placeholder='Valor'\r\n+                    keyboardType='numeric'\r\n+                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n+\r\n+                />\r\n+            </View>\r\n+            \r\n+            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n+                <View>\r\n+                    \r\n+                </View>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n+                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+            <Modal animationType='fade' visible={visible} style={Styles.areaModal} onRequestClose={closeModal}>\r\n+            <View style={Styles.modalContainer}>\r\n+                <View style={Styles.formModal}>\r\n+                    <Text style={Styles.titleFormModal}>Selecione</Text>\r\n+                    <TouchableOpacity style={Styles.buttonModal} onPress={closeModal}>\r\n+                        <Text style={Styles.buttonTextModal}>Fechar</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+                <View style={Styles.buttonsContainerModal}>\r\n+                    <TouchableOpacity style={Styles.buttonModal} >\r\n+                        <Text style={Styles.buttonTextModal}>Selecionar Arquivo</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={Styles.buttonModal}>\r\n+                        <Text style={Styles.buttonTextModal}>Selecionar Câmera</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </View>\r\n+        </Modal>\r\n+\r\n+            <View style={Styles.imageContainer}>\r\n+            <ImageViewer\r\n+                placeholderImageSource={PlaceholderImage}\r\n+                selectedImage={selectedImage}\r\n+            />\r\n+            </View>\r\n+\r\n+            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n+                <View style={Styles.button}>\r\n+                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n+                </View>\r\n+            </TouchableOpacity>\r\n+        </View>\r\n+    );\r\n+}\r\n"
                }
            ],
            "date": 1710441298592,
            "name": "Commit-0",
            "content": "import { View, Text, TextInput, TouchableOpacity , Image, Modal} from 'react-native';\r\nimport React, { useState, useEffect } from 'react';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport { Camera } from 'expo-camera';\r\nimport Styles from './Styles/';\r\nimport Icon from 'react-native-vector-icons/MaterialIcons';\r\nimport Header from '../../components/Header/';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst inititExpensesData ={\r\n    description: 'a',\r\n    category:'a',\r\n    value:'a',\r\n    invoice: null // Mudando para null para indicar que inicialmente não há imagem selecionada\r\n};\r\n\r\n\r\n\r\nfunction ImageViewer({ placeholderImageSource, selectedImage }) {\r\n    const imageSource = selectedImage  ? { uri: selectedImage } : placeholderImageSource;\r\n    return <Image source={imageSource} style={Styles.image} />;\r\n  }\r\n  \r\n\r\nexport default function AddExpenses() {\r\n    const navigation = useNavigation();\r\n    const [expensesData, setExpensesData] = useState(inititExpensesData);\r\n    const [alertEmptyInput , setAlertEmptyInput] = useState('');\r\n    const [hasPermission, setHasPermission] = useState(null);\r\n    const [type, setType] = useState(Camera.Constants.Type.back);\r\n    const [camera, setCamera] = useState(null);\r\n    const [selectedImage , setSelectedImage] = useState(null);\r\n    const PlaceholderImage = require('../../img/notaFiscal.png');\r\n    const [visible, setVisible] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const { status } = await Camera.requestCameraPermissionsAsync();\r\n            setHasPermission(status === 'granted');\r\n        })();\r\n    }, []);\r\n\r\n    const takePicture = async () => {\r\n        if (camera) {\r\n            const photo = await camera.takePictureAsync();\r\n            setExpensesData({...expensesData, invoice: photo.uri});\r\n        }\r\n    };\r\n\r\n    const pickImage = async () => {\r\n        let result = await ImagePicker.launchImageLibraryAsync({\r\n            allowsEditing: true,\r\n            quality: 1,\r\n        });\r\n\r\n        setSelectedImage(result.assets[0].uri);\r\n        \r\n        \r\n    };\r\n\r\n    const addExpenses = () => {\r\n        if(validateExpenses()){\r\n            setAlertEmptyInput('');\r\n            const success = true;\r\n            if (success) {\r\n                console.log(selectedImage);\r\n            } else {\r\n                setAlertEmptyInput('Erro ao adicionar a despesa');\r\n            }\r\n        } else {\r\n            setAlertEmptyInput('Todos os campos devem ser preenchidos');\r\n        }\r\n    };\r\n\r\n    const validateExpenses = () => {\r\n        const {description, category, value} = expensesData; \r\n        return (\r\n            description.trim() !== '' &&\r\n            category.trim() !== '' &&\r\n            value.trim() !== '' &&\r\n            expensesData.invoice !== null // Garantindo que uma imagem foi selecionada\r\n        );\r\n    };\r\n\r\n    function openModal(){\r\n        setVisible(true)\r\n    }\r\n\r\n    return (\r\n        <View style={Styles.container}>\r\n            <Header/>\r\n            <View Style={Styles.form}> \r\n                <TextInput\r\n                    style={Styles.input}\r\n                    placeholder='Descrição'\r\n                    onChangeText={text => setExpensesData({...expensesData, description: text })}\r\n                />\r\n                <TextInput\r\n                    style={Styles.input}\r\n                    placeholder='Categoria'\r\n                    onChangeText={text => setExpensesData({...expensesData, category: text })}\r\n\r\n                />\r\n                <TextInput\r\n                    style={Styles.input}\r\n                    placeholder='Valor'\r\n                    keyboardType='numeric'\r\n                    onChangeText={text => setExpensesData({...expensesData, value: text })}\r\n\r\n                />\r\n            </View>\r\n            \r\n            <TouchableOpacity style={Styles.areaButton} onPress={openModal} >\r\n                <View style={Styles.button}>\r\n                    <Text style={Styles.textButton}>Anexar Nota Fiscal</Text>\r\n                    <Icon name=\"add-a-photo\" size={30} color=\"#000\" />\r\n                </View>\r\n            </TouchableOpacity>\r\n            <Modal animationType='fade' visible={visible}>\r\n                <View style={{width: 200, height: 500}}>\r\n                    <Text style={{backgroundColor: \"red\"}}>Selecione</Text>\r\n                    <TouchableOpacity>\r\n                        <Text>Camera</Text>\r\n                    </TouchableOpacity>\r\n                    <TouchableOpacity onPress={async() => pickImage()}>\r\n                        <Text>Arquivo</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n                \r\n            </Modal>\r\n\r\n            <View style={Styles.imageContainer}>\r\n            <ImageViewer\r\n                placeholderImageSource={PlaceholderImage}\r\n                selectedImage={selectedImage}\r\n            />\r\n            </View>\r\n\r\n            <TouchableOpacity style={Styles.areaButtonAdd} onPress={addExpenses}>\r\n                <View style={Styles.button}>\r\n                    <Text style={Styles.textButton}>ADICIONAR DESPESA</Text>\r\n                </View>\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n}\r\n"
        }
    ]
}